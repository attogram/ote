<?php
require_once('ote.class.php');

if( $_SESSION['level'] != 9 ) {  
    $_SESSION['alert'] = $ote->__('admin error: permission level 9 required'); 
    header('HTTP/1.1 301 Moved Permanently');
    header('Location: ' . HOSTNAME); exit;
}


$alert = NULL;


//$ote->force_slash_at_end();

$request_uri = $_SERVER['REQUEST_URI'];
$uri = explode('/', $request_uri);

// Error: url too long - redir to home
//if( isset($uri[6+DEPTH]) && !$_POST ) { 
//  $_SESSION['alert'] .= 'ERROR: url too long: ' . sizeof($uri) . ' POST=' . $ote->xdebug($_POST) . ' <br />';
//  header('HTTP/1.1 301 Moved Permanently');
//  header('Location: ' . HOSTNAME); exit;
//} 

if( !isset($uri[3+DEPTH]) ) {   
  do_admin_page();  
  $ote->show_footer(); 
  exit; 
}

switch( $uri[2+DEPTH] ) {
  case 'users':
    do_admin_users(); break;
  case 'cleanup':
    do_cleanup(); break;
  default:
    header('HTTP/1.1 301 Moved Permanently');
    header('Location: ' . HOSTNAME); exit;
} // end switch

$ote->show_footer();

///////////////////////////////////////
function do_admin_users() {

  global $ote, $uri;
  
  $res = $ote->query('SELECT * FROM ote_user ORDER BY id');
  
  $r = '<table border="1" cellpadding="2" cellspacing="0"><tr>'
  . '<td>'
  . $ote->__('username')
  . '</td><td>'
  . $ote->__('level')
  . '</td><td>'
  . $ote->__('email')
  . '</td><td>'
  . $ote->__('created')
  . '</td><td>'
  . $ote->__('last login')
  . '</td></tr>';
  
  while( list($trash,$x) = each($res) ) {
  
    $ote->get_user_level_name( $x->level );

    $r .= '<tr><td><a href="' . OTE_DIRECTORY . 'admin/users/' . $x->id . '">' . $x->username . '</a></td>'
    . '<td>' . $ote->level_name . '</td>'
    . '<td>' . $x->email . '</td>'
    . '<td><small>' . $x->created . '</small></td>'
    . '<td><small>' . $x->last_login . '</small></td>'
    . '</tr>';
    
    if( is_numeric($uri[3+DEPTH]) &&  $uri[3+DEPTH] == $x->id ) {

      if( $_POST['id'] && is_numeric($_POST['id']) && $_POST['id'] == $x->id ) {

        if( $x->id == DEMO_MODE ) {
          $_SESSION['alert'] .= $ote->__('demo mode - you may not edit this user') . '<br />';
          header('Location: ' . HOSTNAME . 'admin/users/'); 
          exit;
        } // end if demo mode

        
        $m = array(); $i = 0;
        if( $_POST['username'] != $x->username ) {
          $m[++$i] = " username = '" . mysql_escape_string( $_POST['username'] ) . "' " ;
        }
        if( $_POST['password'] != $x->password ) { 
          $m[++$i] = " password = '" . mysql_escape_string( $_POST['password'] ) . "' "; 
        }
        if( $_POST['email'] != $x->email ) { 
          $m[++$i] = " email = '" . mysql_escape_string( $_POST['email'] ) . "' "; 
        }
        if( $_POST['level'] != $x->level ) { 
          $m[++$i] = " level = '" . mysql_escape_string( $_POST['level'] ) . "' "; 
        }
        
        reset($m);
        if( sizeof( $m ) > 0 ) {
          $sql = 'UPDATE ote_user SET ';
          $qqcount = 0;
          while( list($trash,$qq) = each($m) ) {
            $sql .= $qq;
            $qqcount++;
            if( sizeof( $m ) != $qqcount ) { $sql .= ','; }
          }
          $sql .= " WHERE id = '" . $x->id . "' LIMIT 1";
          $qqres = $ote->raw_query($sql);
          $_SESSION['alert'] .= $ote->__('user updated');

        } else {        // end if there is an update...
          $_SESSION['alert'] .= $ote->__('no update') . '<br />';
        } // end if there is no update
    
        header('Location: ' . HOSTNAME . 'admin/users/' . $x->id); exit;

      } else {  // end if post
        $r .=  '<tr><td colspan="6"><form action="' . OTE_DIRECTORY . 'admin/users/' . $x->id . '" method="POST"><pre>
<b>' . $ote->__('modify') . ': ' . $x->username . '</b> 
' . $ote->__('username') . ': <input type="text" name="username" value="' . $x->username . '" size="40"> 
' . $ote->__('password') . ': <input type="text" name="password" value="' . $x->password . '" size="40"> 
' . $ote->__('email') . ': <input type="text" name="email" value="' . $x->email . '" size="40">  
' . $ote->__('level') . ':
<input type="radio" name="level" value="0"' . $ote->level0 . '>'
. $ote->__('guest: view only') . '</input>
<input type="radio" name="level" value="1"' . $ote->level1 . '>'
. $ote->__('user: suggest dictionary edits') . '</input>
<input type="radio" name="level" value="5"' . $ote->level5 . '>'
. $ote->__('dictionary admin: edit dictionary') . '</input>
<input type="radio" name="level" value="9"' . $ote->level9 . '>'
. $ote->__('site admin: edit users') . '</input>

          <input type="submit" value="      ' . $ote->__('modify') . '       ">
</pre><input type="hidden" name="id" value="' . $x->id . '"></form></td></tr>';   
      } // end if post or not..
      
    } // end if edit this user
  } // end each result
  
  $ote->show_header( $ote->__('admin users') ); 
  print $r;
  print '</table>';
  
} // END function do_admin_users

///////////////////////////////////////
function do_admin_page() {

        global $ote;

        $ote->show_header('Admin');

        // check  that session.id is valid
        if ( is_nan( $_SESSION['id'] ) ) {  print $ote->__('error with input'); exit; }

        print ''
        . '<p><a href="../error.check.php">' . $ote->__('install error check') . '</a></p>'
        . '<p><a href="./users/">' . $ote->__('user admin') . '</a></p>'
        . '<p><a href="../task/">' . $ote->__('task list') . '</a></p>'
        . '<p><a href="./cleanup/">' . $ote->__('unpaired word dictionary cleanup') . '</a></p>';

} // end function do_admin_page


///////////////////////////////////////
function do_cleanup() {
  global $ote;
  $ote->show_header( $ote->__('unpaired word dictionary cleanup') );
  print '<p>' . $ote->__('finding unpaired words') . '</p>';
  print '<hr size="1" /><pre>';
  flush(); ob_flush();
  $sql = 'DELETE FROM ote_word WHERE ';
  $x = $ote->query('SELECT id, word FROM ote_word order by id');
  while( list($trash,$y) = each($x) ) {
    if( !$ote->query("SELECT id FROM ote_word2word WHERE s_id = '" . $y->id . "' LIMIT 1") ) {
      if( !$ote->query("SELECT id FROM ote_word2word WHERE t_id = '" . $y->id . "' LIMIT 1") ) {
        print "\n#"  . $y->id . "\t" . $y->word;
        $sql .= " id='" . $y->id . "' OR";
        $count++;
        flush(); ob_flush();
      }
    }
  }


   if( $count == 0 ) {
    print '<p>' . $ote->__('no unpaired words found') . '</p></pre><hr size="1" />';
    print '<p>' . $ote->__('dictionary is clean') . '</p>';
    $ote->show_footer();
    exit;
  } 
  
  print '<hr size="1" /></pre>';
  $sql = ereg_replace(' OR$', '', $sql); // get rid of last ' OR' 
  print '<p>Delete SQL:<br /><textarea rows="5" cols="60">' . $sql . '</textarea>';
  $ote->raw_query($sql);
  print '<p>All ' . $count . ' Unpaired Words Deleted.</p>';
  

  
} // end function cleanup

